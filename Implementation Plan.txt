1. Conceptualization and Planning

    Define Objectives:
        - Create a webapp where users can search for specific word, and results of spotify songs, podcasts and audiobooks
          (from this point forward, "content" will be used to refer to songs, podcasts, and audiobooks) with the given word
          is provided. The given content is played at the time where the word is said.
        - This project is inspired by https://youglish.com/, which does the same thing with youtube videos.

    Target Audience:
        - Language learners and educators. This will help students hear a given word being pronounced and used by native
          speakers in a practical context, making it a useful resource for educators too.

    Features:
        - Search Functionality: Allow users to search for content based on keywords.
        - Playback: Stream all the content that is found directly, at the given time where the keywords are used.
        - Responsive Design: Ensure the website works well across various devices and screen sizes.

2. Technical Requirements
Data Collection:

Collecting video IDs, captions, and storing them in a PostgreSQL database.
Ensure accurate timestamping of when specific words are spoken.
Frontend:

Technologies: React.js for building dynamic user interfaces.
Styling: Tailwind CSS for responsive and modern design.
Integration: Utilize Axios for communicating with the backend APIs.
Backend:

Framework: Python with Flask to develop RESTful APIs for connecting the database to the frontend.
Deployment:

Hosting: Deploy the frontend and backend on Vercel for seamless integration and scalability.
3. Architecture Design
Frontend Components:

Search Component: Allows users to input queries and sends requests to the backend.
Result Display: Shows search results with video details and playback options.
Player Component: Facilitates video playback with precise timing of captions.
Dynamic Text Component: Displays captions with highlighted searched words.
Filters: Options to select content type (e.g., podcasts, songs, audiobooks), age, and level.
Backend Structure:

API Endpoints:
/search
/play
/captions
...
Controllers: Manage business logic for processing search queries, handling user sessions, and interacting with external APIs (e.g., YouTube Data API).

4. Development Steps

    Data collection and storage.
        Collection  --> @Ammar
            - Through Spotify's API. Genius's API can be used as an alternative to collect songs and lyrics more reliably.
        Storage     --> @Andrew
            - Andrews local database :0

    Backend Development:
        Using Python.
            Framework:
                - Flask for building the backend API.
            API Endpoints:
                - Endpoints to handle Spotify API requests (/search, /play, etc.) in the Flask application.
                - Use Python requests library or similar to make requests to the database and handle content playback.

    Frontend Development:
        React App. --> initiate the front end
            Search Component
                - Create a component that accepts user input and sends search queries to the backend.
                - Use axios or fetch API to make HTTP requests to your backend /search endpoint.
            Results Component
                - Display search results with track information and playback options.
                - Design UI elements using CSS frameworks like Bootstrap or Tailwind CSS for responsiveness.
            Player Component
                - Integrate Spotify Web Playback SDK into a React component for streaming selected tracks.
                - Handle playback controls and track selection based on user interactions.
            Lyrics Component

    Connect with Backend APIs:
        - HTTP Requests:
            - Use axios library to make HTTP requests from React components to backend APIs (GET /search, POST /login, etc.).
            - Handle API responses and update component states accordingly.
        - State Management:
            - Use React's useState and useEffect hooks to manage component state and handle asynchronous data fetching.
            - Ensure data flow between components is efficient and updates are reflected in real-time.
