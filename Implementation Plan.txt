1. Conceptualization and Planning

    Define Objectives:
        - Create a webapp where users can search for specific word, and results of spotify songs, podcasts and audiobooks
          (from this point forward, "content" will be used to refer to songs, podcasts, and audiobooks) with the given word
          is provided. The given content is played at the time where the word is said.
        - This project is inspired by https://youglish.com/, which does the same thing with youtube videos.

    Target Audience:
        - Language learners and educators. This will help students hear a given word being pronounced and used by native
          speakers in a practical context, making it a useful resource for educators too.

    Features:
        - Search Functionality: Allow users to search for content based on keywords.
        - Playback: Stream all the content that is found directly, at the given time where the keywords are used.
        - Responsive Design: Ensure the website works well across various devices and screen sizes.

2. Technical Requirements
    Data collection:
        - Collecting song titles, lyrics, and storing them in a SQL database [andrews own home database :)].
            -   genious
                - make sure that we can collect the second the work is said.

        - Maintaining the database so that it is up to date.
                - figure out the port and shit
    Frontend:
       - Technologies: React.js for dynamic UI components.
       - Styling: Tailwind CSS for responsive design.
       - Integration: Use Axios for making HTTP requests to the backend.
       
    Backend:
       - Backend: Python with Flask for building RESTful APIs, to integrate the database with the front end.

    Deployment:
       - Hosting: Vercel to deploy the front end and backend
       
3. Architecture Design

    Frontend Components:
        (keeping the stylify)
       - Search Component: Accepts user input and sends requests to the backend.
       - Result Display: Renders search results with track details and playback options.
       - Player Component: Integrates Spotify Web Playback SDK for streaming tracks.
       - Dynamic text component: Renders the lytics of the song highlighting the searched word.
       - toggle chosing the age, the level, (podcase, songs, or audiobooks)

    Backend Structure:
       - API Endpoints: 
            /search, 
            /play, 
            /lyrics,
            ....
       - Controllers: Handle business logic for processing search queries, managing user sessions, and interacting with Spotify's API.

4. Development Steps

    Data collection and storage.
        Collection  --> @Ammar
            - Through Spotify's API. Genius's API can be used as an alternative to collect songs and lyrics more reliably.
        Storage     --> @Andrew
            - Andrews local database :0

    Backend Development:
        Using Python.
            Framework:
                - Flask for building the backend API.
            API Endpoints:
                - Endpoints to handle Spotify API requests (/search, /play, etc.) in the Flask application.
                - Use Python requests library or similar to make requests to the database and handle content playback.

    Frontend Development:
        React App. --> initiate the front end
            Search Component
                - Create a component that accepts user input and sends search queries to the backend.
                - Use axios or fetch API to make HTTP requests to your backend /search endpoint.
            Results Component
                - Display search results with track information and playback options.
                - Design UI elements using CSS frameworks like Bootstrap or Tailwind CSS for responsiveness.
            Player Component
                - Integrate Spotify Web Playback SDK into a React component for streaming selected tracks.
                - Handle playback controls and track selection based on user interactions.
            Lyrics Component

    Connect with Backend APIs:
        - HTTP Requests:
            - Use axios library to make HTTP requests from React components to backend APIs (GET /search, POST /login, etc.).
            - Handle API responses and update component states accordingly.
        - State Management:
            - Use React's useState and useEffect hooks to manage component state and handle asynchronous data fetching.
            - Ensure data flow between components is efficient and updates are reflected in real-time.
